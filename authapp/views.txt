from rest_framework.response import Response
from rest_framework.views import APIView
import psycopg
from configparser import ConfigParser
import jwt

# Define the secret key for encoding the JWT
SECRET_KEY = 'Asp123'

# Function to read database configuration (from config.ini file)
def config(filename='database.ini', section='postgresql'):
    parser = ConfigParser()
    parser.read(filename)
    db = {}
    params = parser.items(section)
    for param in params:
        db[param[0]] = param[1]
    return db

# Function to generate JWT token
def generate_jwt(usr_id):
    payload = {'usr_id': usr_id}
    token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')
    return token

# Authentication view
class AuthenticateView(APIView):
    def post(self, request):
        # Extract usr_id and usr_pass from the request body
        usr_id = request.data.get('usr_id')
        usr_pass = request.data.get('usr_pass')

        # Check if usr_id and usr_pass are provided
        if not usr_id or not usr_pass:
            return Response({'error': 'Both usr_id and usr_pass are required'}, status=400)

        try:
            # Connect to the database
            connection = None
            params = config()
            connection = psycopg.connect(**params)

            cursor = connection.cursor()

            # Query to fetch the password for the provided usr_id
            cursor.execute("""
                SELECT password
                FROM users
                WHERE usr_id = %s
            """, (usr_id,))

            # Fetch the stored password
            stored_password = cursor.fetchone()

            # Check if password exists and matches the input password
            if stored_password and stored_password[0] == usr_pass:
                # Generate JWT token if authentication is successful
                token = generate_jwt(usr_id)
                return Response({'message': 'Authenticated successfully', 'token': token}, status=200)
            else:
                return Response({'error': 'Invalid usr_id or usr_pass'}, status=401)

        except (Exception, psycopg.DatabaseError) as error:
            print(f"Error: {error}")
            return Response({'error': 'Database error or server issue'}, status=500)

        finally:
            # Close the database connection
            if connection is not None:
                connection.close()
        
        # Add a default response in case of unexpected behavior
        return Response({'error': 'Unexpected error occurred'}, status=500)
